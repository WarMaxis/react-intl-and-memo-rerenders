{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["normalComponentCounter","memoComponentCounter","injectIntlComponentCounter","injectIntlInsideMemoComponentCounter","normalComponentPlusPropIntlCounter","NormalComponent","MemoComponent","memo","ComponentWithInjectIntlAndMemoInside","injectIntl","intl","console","log","ComponentWithMemoAndInjectIntlInside","NormalComponentPlusPropIntl","useState","counter","setCounter","useEffect","interval","setInterval","prevState","clearInterval","className","Boolean","window","location","hostname","match","data","locale_en","language","navigator","split","ReactDOM","render","locale","messages","document","getElementById","serviceWorker","ready","then","registration","unregister"],"mappings":"scAGIA,EAAyB,EACzBC,EAAuB,EACvBC,EAA6B,EAC7BC,EAAuC,EACvCC,EAAqC,EAEnCC,EAAkB,WAGpB,OAFAL,GAAkD,EAE3C,2FAAgE,gCAASA,GAAzE,UAGLM,EAAgBC,gBAAK,WAGvB,OAFAN,GAA8C,EAEvC,6DAAkC,gCAASA,GAA3C,YAGLO,EAAuCC,YAAWF,gBAAM,SAACG,GAK3D,OAJAR,GAA0D,EAE1DS,QAAQC,IAAIF,GAEL,6EAAkD,gCAASR,GAA3D,aAGLW,EAAuCN,eAAKE,aAAW,SAACC,GAK1D,OAJAP,GAA8E,EAE9EQ,QAAQC,IAAIF,GAEL,+EAAoD,gCAASP,GAA7D,aAGLW,EAA8BP,gBAAK,SAACG,GAKtC,OAJAN,GAA0E,EAE1EO,QAAQC,IAAIF,GAEL,wEAA6C,gCAASN,GAAtD,YAiCIK,mBA9Bf,SAAaC,GACT,MAA8BK,mBAAS,GAAvC,mBAAOC,EAAP,KAAgBC,EAAhB,KAYA,OAVAC,qBACI,WACI,IAAMC,EAAWC,aAAY,kBAAMH,GAAW,SAAAI,GAAS,OAAIA,EAAY,OAAI,KAE3E,OAAO,WACHC,cAAcH,MAEnB,CAACF,IAIJ,yBAAKM,UAAU,OACX,yGACA,8CAAoBP,GACpB,kBAAC,EAAD,MACA,6BACA,kBAACV,EAAD,MACA,6BACA,kBAACE,EAAD,MACA,6BACA,kBAACK,EAAD,MACA,6BACA,kBAACC,EAAD,CAA6BJ,KAAMA,QC1D3Bc,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,oBCRAC,EAAO,CACX,G,MACA,GAAMC,GAGFC,EAAWC,UAAUD,SAASE,MAAM,QAAQ,GAElDC,IAASC,OACP,kBAAC,IAAD,CAAcC,OAAQL,EAAUM,SAAUR,EAAKE,IAC3C,kBAAC,EAAD,OAEJO,SAASC,eAAe,SD8GpB,kBAAmBP,WACrBA,UAAUQ,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.ca6e8819.chunk.js","sourcesContent":["import React, { useState, useEffect, memo } from \"react\";\nimport { injectIntl } from 'react-intl';\n\nlet normalComponentCounter = 0;\nlet memoComponentCounter = 0;\nlet injectIntlComponentCounter = 0;\nlet injectIntlInsideMemoComponentCounter = 0;\nlet normalComponentPlusPropIntlCounter = 0;\n\nconst NormalComponent = () => {\n    normalComponentCounter = normalComponentCounter + 1;\n\n    return <div>Normal component (without injectIntl and without memo() ): <strong>{normalComponentCounter}</strong> step</div>\n};\n\nconst MemoComponent = memo(() => {\n    memoComponentCounter = memoComponentCounter + 1;\n\n    return <div>Component wrapped in memo(): <strong>{memoComponentCounter}</strong> step</div>\n});\n\nconst ComponentWithInjectIntlAndMemoInside = injectIntl(memo(((intl) => {\n    injectIntlComponentCounter = injectIntlComponentCounter + 1;\n\n    console.log(intl)\n\n    return <div>Component with injectIntl and memo() inside: <strong>{injectIntlComponentCounter}</strong> step</div>\n})));\n\nconst ComponentWithMemoAndInjectIntlInside = memo(injectIntl((intl) => {\n    injectIntlInsideMemoComponentCounter = injectIntlInsideMemoComponentCounter + 1;\n\n    console.log(intl)\n\n    return <div>Component with memo() and injectIntl() inside: <strong>{injectIntlInsideMemoComponentCounter}</strong> step</div>\n}));\n\nconst NormalComponentPlusPropIntl = memo((intl) => {\n    normalComponentPlusPropIntlCounter = normalComponentPlusPropIntlCounter + 1;\n\n    console.log(intl)\n\n    return <div>Normal component with prop intl object: <strong>{normalComponentPlusPropIntlCounter}</strong> step</div>\n});\n\nfunction App(intl) {\n    const [counter, setCounter] = useState(1);\n\n    useEffect(\n        () => {\n            const interval = setInterval(() => setCounter(prevState => prevState + 1), 1000);\n\n            return () => {\n                clearInterval(interval)\n            }\n        }, [setCounter]\n    )\n\n    return (\n        <div className=\"App\">\n            <h2>React-intl injectIntl with memo() and useMemo() re-renders behaviour test</h2>\n            <h2>Counter steps: {counter}</h2>\n            <NormalComponent />\n            <br />\n            <MemoComponent />\n            <br />\n            <ComponentWithInjectIntlAndMemoInside />\n            <br />\n            <ComponentWithMemoAndInjectIntlInside />\n            <br />\n            <NormalComponentPlusPropIntl intl={intl} />\n        </div>\n    );\n}\n\nexport default injectIntl(App);","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nimport {IntlProvider} from \"react-intl\";\nimport locale_en from \"./translations/en.json\";\nimport locale_nl from \"./translations/nl.json\";\n\nconst data = {\n  'nl': locale_nl,\n  'en': locale_en\n};\n\nconst language = navigator.language.split(/[-_]/)[0];\n\nReactDOM.render(\n  <IntlProvider locale={language} messages={data[language]}>\n      <App/>\n  </IntlProvider>,\n  document.getElementById('root')\n);\n\nserviceWorker.unregister();"],"sourceRoot":""}